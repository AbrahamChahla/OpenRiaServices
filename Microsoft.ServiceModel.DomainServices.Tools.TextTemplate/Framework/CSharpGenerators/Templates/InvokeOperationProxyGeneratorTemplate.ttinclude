<#+

/// <summary>
/// Generates invoke operations.
/// </summary>
protected virtual void GenerateInvokeOperations()
{
	foreach(DomainOperationEntry operation in this.DomainServiceDescription.DomainOperationEntries.Where(p => p.Operation == DomainOperation.Invoke).OrderBy(m => m.Name))
	{
		this.GenerateInvokeOperation(operation, true);
		this.GenerateInvokeOperation(operation, false);
	}
}

/// <summary>
/// Generates an invoke operation.
/// </summary>
/// <param name="domainOperationEntry">The invoke operation to be generated.</param>
/// <param name="generateCallback">If set to true, causes callback to be generated on the method.</param>
protected virtual void GenerateInvokeOperation(DomainOperationEntry domainOperationEntry, bool generateCallback)
{	
	this.GenerateInvokeOperationDeclaration(domainOperationEntry, generateCallback);

	this.GenerateOpeningBrace();
	this.GenerateInvokeMethodBody(domainOperationEntry, generateCallback);
	this.GenerateClosingBrace();
}

private void GenerateInvokeOperationDeclaration(DomainOperationEntry domainOperationEntry, bool generateCallback)
{
	// First generate custom attributes for the qery method
	IEnumerable<Attribute> methodAttributes = domainOperationEntry.Attributes.Cast<Attribute>();
	this.GenerateAttributes(methodAttributes);
	string invokeOperationReturnTypeName = this.GetInvokeMethodReturnTypeName(domainOperationEntry);
#>
public <#= invokeOperationReturnTypeName #> <#= domainOperationEntry.Name #>(
<#+
	this.GenerateParameterDeclaration(domainOperationEntry.Parameters, true);

	if(generateCallback)
	{
		if(domainOperationEntry.Parameters.Count() > 0)
		{
			#>, <#+
		}
#>
Action<<#= invokeOperationReturnTypeName #>> callback, object userState
<#+
	}
#>)
<#+
}

private void GenerateInvokeMethodBody(DomainOperationEntry domainOperationEntry, bool generateCallback)
{
	string parameterDictionaryString = this.GenerateServiceOpMethodBody(domainOperationEntry, domainOperationEntry.Name);
	this.GenerateInvokeMethodReturn(domainOperationEntry, parameterDictionaryString, generateCallback);
}

private void GenerateInvokeMethodReturn(DomainOperationEntry domainOperationEntry, string parameterDictionaryString, bool generateCallback)
{
	InvokeAttribute invokeAttribute = (InvokeAttribute)domainOperationEntry.OperationAttribute;
	string returnTypeNameString = CodeGenUtilities.GetTypeName(CodeGenUtilities.TranslateType(domainOperationEntry.ReturnType));
#>
return ((<#= this.GetInvokeMethodReturnTypeName(domainOperationEntry) #>)(this.InvokeOperation("<#= domainOperationEntry.Name #>", typeof(<#= returnTypeNameString #>), <#= parameterDictionaryString #>, 
<#= CodeGenUtilities.GetBooleanString(invokeAttribute.HasSideEffects, true) #>,
<#+
	if(generateCallback)
	{
#>
callback, userState)));
<#+
	}
	else
	{
#>
null, null)));
<#+
	}
		
}

private string GenerateServiceOpMethodBody(DomainOperationEntry domainOperationEntry, string methodName)
{
	string parameterDictionaryName = "null";
	DomainOperationParameter[] domainOperationEntryParameters = domainOperationEntry.Parameters.ToArray();
	if(domainOperationEntryParameters.Length > 0)
	{
		parameterDictionaryName = "parameters";
#>
Dictionary<string, object> <#= parameterDictionaryName #> = new Dictionary<string, object>();			
<#+
		foreach(DomainOperationParameter paramInfo in domainOperationEntryParameters)
		{
			if (!this.RegisterEnumTypeIfNecessary(paramInfo.ParameterType, domainOperationEntry))
            {
				return String.Empty;
			}
			string paramName = CodeGenUtilities.GetSafeName(paramInfo.Name);
#>
<#= parameterDictionaryName #>.Add("<#= paramName #>", <#= paramName #>);
<#+
		}
	}
	
#>
this.ValidateMethod("<#= methodName #>", <#= parameterDictionaryName #>);
<#+
	return parameterDictionaryName;
}

#>
