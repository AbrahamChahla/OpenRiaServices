<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OpenRiaServices.DomainServices.Server" #>
<#@ include file="AttributeGeneratorTemplate.ttinclude" #>

<#+


#region ToString Helpers
/// <summary>
/// Utility class to produce culture-oriented representation of an object as a string.
/// </summary>
public class ToStringInstanceHelper
{
	private System.IFormatProvider _formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
	/// <summary>
	/// Gets or sets format provider to be used by ToStringWithCulture method.
	/// </summary>
	public System.IFormatProvider FormatProvider
	{
		get
		{
			return this._formatProviderField ;
		}
		set
		{
			if ((value != null))
			{
				this._formatProviderField  = value;
			}
		}
	}
	/// <summary>
	/// This is called from the compile/run appdomain to convert objects within an expression block to a string
	/// </summary>
	public string ToStringWithCulture(object objectToConvert)
	{
		if ((objectToConvert == null))
		{
			throw new global::System.ArgumentNullException("objectToConvert");
		}
		System.Type t = objectToConvert.GetType();
		System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
					typeof(System.IFormatProvider)});
		if ((method == null))
		{
			return objectToConvert.ToString();
		}
		else
		{
			return ((string)(method.Invoke(objectToConvert, new object[] {
						this._formatProviderField })));
		}
	}
}
private ToStringInstanceHelper _toStringHelperField = new ToStringInstanceHelper();
public ToStringInstanceHelper ToStringHelper
{
	get
	{
		return this._toStringHelperField;
	}
}
#endregion
		
private void GenerateParameterDeclaration(IEnumerable<DomainOperationParameter> parameters, bool generateAttributes)
{
	DomainOperationParameter[] paramInfos = parameters.ToArray();
	for(int i = 0; i < paramInfos.Length; i++)
	{
		DomainOperationParameter paramInfo = paramInfos[i];
		if(generateAttributes)
		{
			IEnumerable<Attribute> paramAttributes = paramInfo.Attributes.Cast<Attribute>();
			this.GenerateAttributes(paramAttributes);
		}
		string paramTypeName = CodeGenUtilities.GetTypeName(CodeGenUtilities.TranslateType(paramInfo.ParameterType));
		string paramName = CodeGenUtilities.GetSafeName(paramInfo.Name);
		#><#= paramTypeName #> <#= paramName #><#+
		if(i + 1 < paramInfos.Length)
		{
			#>, <#+
		}		
	}
}

private void GenerateOpeningBrace()
{
#>
{
<#+
	PushIndent("\t");
}

private void GenerateClosingBrace()
{
	PopIndent();
#>
}
<#+
}

private void GenerateNamespace(string ns)
{
#>
namespace <#= ns #>
<#+
}

#>
